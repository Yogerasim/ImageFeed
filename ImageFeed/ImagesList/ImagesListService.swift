import UIKit

final class ImagesListService {
    static let didChangeNotification = Notification.Name("ImagesListServiceDidChange")
    
    private(set) var photos: [Photo] = []
    private var lastLoadedPage: Int?
    private var isLoading = false
    private let urlSession = URLSession.shared
    
    func fetchPhotosNextPage() {
        guard !isLoading else {
            print("‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ —É–∂–µ –∏–¥—ë—Ç ‚Äî –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º.")
            return
        }
        isLoading = true

        let nextPage = (lastLoadedPage ?? 0) + 1
        guard let request = makePhotosRequest(page: nextPage) else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å URLRequest.")
            isLoading = false
            return
        }

        print("üì° –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É \(nextPage)")

        let task = urlSession.dataTask(with: request) { [weak self] data, response, error in
            guard let self else { return }
            defer { self.isLoading = false }

            if let error = error {
                print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: \(error.localizedDescription)")
                return
            }

            guard
                let data = data,
                let photoResults = try? JSONDecoder.snakeCaseDecoder.decode([PhotoResult].self, from: data)
            else {
                print("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")
                return
            }

            let newPhotos: [Photo] = photoResults.map { result in
                Photo(
                    id: result.id,
                    size: CGSize(width: result.width, height: result.height),
                    createdAt: result.createdAt,
                    welcomeDescription: result.description,
                    thumbImageURL: result.urls.thumb,
                    largeImageURL: result.urls.full,
                    isLiked: result.likedByUser
                )
            }

            DispatchQueue.main.async {
                self.photos.append(contentsOf: newPhotos)
                self.lastLoadedPage = nextPage
                print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ \(newPhotos.count) —Ñ–æ—Ç–æ, –≤—Å–µ–≥–æ: \(self.photos.count)")
                NotificationCenter.default.post(name: Self.didChangeNotification, object: nil)
            }
        }

        task.resume()
    }
    
    private func makePhotosRequest(page: Int) -> URLRequest? {
        guard let token = OAuth2TokenStorage.shared.token else {
            print("‚ùå –ù–µ—Ç access token –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
            return nil
        }

        var components = URLComponents(string: "https://api.unsplash.com/photos")
        components?.queryItems = [
            URLQueryItem(name: "page", value: "\(page)"),
            URLQueryItem(name: "per_page", value: "10")
        ]

        guard let url = components?.url else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å URL.")
            return nil
        }

        var request = URLRequest(url: url)
        request.setValue("Bearer \(token)", forHTTPHeaderField: "Authorization")
        return request
    }
}
