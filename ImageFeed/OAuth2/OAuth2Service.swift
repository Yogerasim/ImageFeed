import Foundation

// MARK: - AuthServiceError

enum AuthServiceError: Error {
    case invalidRequest
    case invalidResponse
    case decodingError
    case tokenMissing
}



// MARK: - OAuth2Service

final class OAuth2Service {
    
    static let shared = OAuth2Service()
    private init() {}

    private let urlSession = URLSession.shared
    private let tokenStorage = OAuth2TokenStorage()

    private var task: URLSessionTask?
    private var lastCode: String?

    // MARK: - Public API

    func fetchOAuthToken(_ code: String, completion: @escaping (Result<String, Error>) -> Void) {
        assert(Thread.isMainThread)

        if let task = task {
            if lastCode != code {
                print("[OAuth2Service] üîÅ –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å —Å –∫–æ–¥–æ–º: \(lastCode ?? "nil")")
                task.cancel()
            } else {
                print("[OAuth2Service] ‚ö†Ô∏è –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å —Ç–µ–º –∂–µ –∫–æ–¥–æ–º: \(code)")
                completion(.failure(AuthServiceError.invalidRequest))
                return
            }
        } else if lastCode == code {
            print("[OAuth2Service] ‚ö†Ô∏è –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∫–æ–¥ –ø—Ä–∏ –ø—É—Å—Ç–æ–º task: \(code)")
            completion(.failure(AuthServiceError.invalidRequest))
            return
        }

        lastCode = code
        print("[OAuth2Service] üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø—Ä–æ—Å —Ç–æ–∫–µ–Ω–∞ —Å –∫–æ–¥–æ–º: \(code)")

        guard let request = makeOAuthTokenRequest(code: code) else {
            print("[OAuth2Service] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å")
            completion(.failure(AuthServiceError.invalidRequest))
            return
        }

        let task = urlSession.objectTask(for: request) { [weak self] (result: Result<OAuthTokenResponseBody, Error>) in
            DispatchQueue.main.async {
                self?.task = nil
                self?.lastCode = nil

                switch result {
                case .success(let decoded):
                    let token = decoded.accessToken
                    print("[OAuth2Service] ‚úÖ –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω: \(token.prefix(6))... (–æ–±—Ä–µ–∑–∞–Ω)")
                    self?.tokenStorage.token = token
                    completion(.success(token))

                case .failure(let error):
                    print("[OAuth2Service] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: \(error.localizedDescription)")
                    completion(.failure(error))
                }
            }
        }

        self.task = task
        task.resume()
    }

    // MARK: - Request Builder

    private func makeOAuthTokenRequest(code: String) -> URLRequest? {
        guard let baseURL = URL(string: "https://unsplash.com") else {
            print("[OAuth2Service] ‚ùå baseURL –Ω–µ–≤–∞–ª–∏–¥–µ–Ω")
            return nil
        }

        var components = URLComponents()
        components.path = "/oauth/token"
        components.queryItems = [
            URLQueryItem(name: "client_id", value: Constants.accessKey),
            URLQueryItem(name: "client_secret", value: Constants.secretKey),
            URLQueryItem(name: "redirect_uri", value: Constants.redirectURI),
            URLQueryItem(name: "code", value: code),
            URLQueryItem(name: "grant_type", value: "authorization_code")
        ]

        guard let url = components.url(relativeTo: baseURL) else {
            print("[OAuth2Service] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å URL –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
            return nil
        }

        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        return request
    }
}
