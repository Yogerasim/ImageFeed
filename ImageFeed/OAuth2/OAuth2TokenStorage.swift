import Foundation
import SwiftKeychainWrapper

// MARK: - OAuthTokenResponseBody

struct OAuthTokenResponseBody: Codable {
    let accessToken: String

    enum CodingKeys: String, CodingKey {
        case accessToken = "access_token"
    }
}

// MARK: - OAuth2TokenStorage

final class OAuth2TokenStorage {
    private let tokenKey = "OAuthToken"

    var token: String? {
        get {
            guard let token = KeychainWrapper.standard.string(forKey: tokenKey) else {
                print("[OAuth2TokenStorage] ‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Keychain")
                return nil
            }

            print("[OAuth2TokenStorage] ‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –∏–∑ Keychain")
            return token
        }
        set {
            guard let token = newValue else {
                let success = KeychainWrapper.standard.removeObject(forKey: tokenKey)
                print("[OAuth2TokenStorage] \(success ? "üóë –£–¥–∞–ª—ë–Ω" : "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å") —Ç–æ–∫–µ–Ω –∏–∑ Keychain")
                return
            }

            let success = KeychainWrapper.standard.set(token, forKey: tokenKey)
            print("[OAuth2TokenStorage] \(success ? "‚úÖ" : "‚ùå") –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ Keychain")
        }
    }
}
