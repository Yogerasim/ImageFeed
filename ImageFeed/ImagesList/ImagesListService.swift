import UIKit
import Kingfisher

final class ImagesListService {
    static let didChangeNotification = Notification.Name("ImagesListServiceDidChange")
    static let shared = ImagesListService()
    
    private(set) var photos: [Photo] = []
    private var lastLoadedPage: Int?
    private var isLoading = false
    private let urlSession = URLSession.shared
    private var isTogglingLike: [String: Bool] = [:]
    
    func fetchPhotosNextPage() {
        guard !isLoading else {
            print("‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ —É–∂–µ –∏–¥—ë—Ç ‚Äî –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º.")
            return
        }
        isLoading = true

        let nextPage = (lastLoadedPage ?? 0) + 1
        guard let request = makePhotosRequest(page: nextPage) else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å URLRequest.")
            isLoading = false
            return
        }

        print("üì° –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É \(nextPage)")

        let task = urlSession.dataTask(with: request) { [weak self] data, response, error in
            guard let self else { return }
            defer { self.isLoading = false }

            if let error = error {
                print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: \(error.localizedDescription)")
                return
            }

            guard let data = data else {
                print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.")
                return
            }

            print("üì¨ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")

            do {
                if let jsonArray = try? JSONSerialization.jsonObject(with: data) as? [Any] {
                    print("üì¶ –¢–∞–±–ª–∏—Ü–∞ JSON —ç–ª–µ–º–µ–Ω—Ç–æ–≤:", jsonArray.count)
                } else {
                    print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å JSON –∫–∞–∫ –º–∞—Å—Å–∏–≤.")
                }

                let photoResults = try JSONDecoder.snakeCaseDecoder.decode([PhotoResult].self, from: data)
                print("‚úÖ –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, count = \(photoResults.count)")

                let newPhotos = photoResults.map(Photo.init)

                DispatchQueue.main.async {
                    self.photos.append(contentsOf: newPhotos)
                    self.lastLoadedPage = nextPage
                    print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ \(newPhotos.count) —Ñ–æ—Ç–æ, –≤—Å–µ–≥–æ: \(self.photos.count)")
                    NotificationCenter.default.post(name: Self.didChangeNotification, object: nil)
                }

            } catch {
                print("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: \(error)")
                if let jsonStr = String(data: data, encoding: .utf8) {
                    print("üì¶ JSON —Å—Ç—Ä–æ–∫–∞:\n\(jsonStr)")
                }
            }
        }

        task.resume()
    }
    
    private func makePhotosRequest(page: Int) -> URLRequest? {
        guard let token = OAuth2TokenStorage.shared.token,
              let url = API.photosURL(page: page) else {
            return nil
        }

        var request = URLRequest(url: url)
        request.setValue("Bearer \(token)", forHTTPHeaderField: "Authorization")
        return request
    }
    
    func toggleLike(at index: Int, completion: @escaping (Bool) -> Void) {
        let photo = photos[index]
        let photoID = photo.id

        guard isTogglingLike[photoID] != true else {
            print("‚è≥ –£–∂–µ –∏–¥—ë—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ª–∞–π–∫–∞ –¥–ª—è \(photoID)")
            completion(false)
            return
        }

        print("‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ toggleLike –¥–ª—è —Ñ–æ—Ç–æ \(photoID), —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: \(photo.isLiked)")

        isTogglingLike[photoID] = true
        let newLike = !photo.isLiked
        photos[index].isLiked = newLike

        guard
            let url = API.photoLikeURL(for: photoID),
            let token = OAuth2TokenStorage.shared.token
        else {
            print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å URL –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è –ª–∞–π–∫–∞")
            isTogglingLike[photoID] = false
            completion(false)
            return
        }

        let method = newLike ? "POST" : "DELETE"
        var request = URLRequest(url: url)
        request.httpMethod = method
        request.setValue("Bearer \(token)", forHTTPHeaderField: "Authorization")

        print("üåê \(method) –∑–∞–ø—Ä–æ—Å –Ω–∞ \(url.absoluteString)")

        urlSession.dataTask(with: request) { [weak self] _, response, error in
            defer { self?.isTogglingLike[photoID] = false }

            guard let self = self else {
                DispatchQueue.main.async { completion(false) }
                return
            }

            if let error = error {
                print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è \(photoID): \(error)")
                DispatchQueue.main.async {
                    self.photos[index].isLiked = !newLike // –æ—Ç–∫–∞—Ç
                    NotificationCenter.default.post(name: Self.didChangeNotification, object: nil)
                    completion(false)
                }
                return
            }

            print("‚úÖ –°–µ—Ä–≤–µ—Ä –ø—Ä–∏–Ω—è–ª \(method) –¥–ª—è \(photoID)")
            DispatchQueue.main.async {
                NotificationCenter.default.post(name: Self.didChangeNotification, object: nil)
                completion(true)
            }
        }.resume()
    }
}

extension ImagesListService {
    func reset(notify: Bool = true, tableView: UITableView? = nil) {
        photos = []
        lastLoadedPage = nil
        isTogglingLike = [:]
        isLoading = false

        print("[ImagesListService] üßπ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ")

        DispatchQueue.main.async {
            tableView?.reloadData()
        }

        KingfisherManager.shared.cache.clearMemoryCache()
        KingfisherManager.shared.cache.clearDiskCache {
            print("[ImagesListService] üßπ –ö—ç—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π Kingfisher –æ—á–∏—â–µ–Ω")
        }

        if notify {
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
                NotificationCenter.default.post(name: Self.didChangeNotification, object: nil)
            }
        }
    }
}
